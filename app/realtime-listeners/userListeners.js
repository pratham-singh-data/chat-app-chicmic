const { verify, } = require('jsonwebtoken');
const { SECRET_KEY, } = require('../../config');
const { findOneInTokens, findFromUsersById, } = require('../services');
const { TOKEN_TYPES, } = require('../util/constants');
const { TOKEN_REGISTERED,
    INVALID_TOKEN,
    NON_EXISTENT_USER,
    TOKEN_ALREADY_REGISTERED,
    TOKEN_NOT_REGISTERED, } = require('../util/messages');

/** Registers a token in sessionTokens
 * @param {Object} sessionTokens Object conatining tokens in current session
 * @param {String} token JWT token to register
 * @param {Function} ack Acknowledgement Function
 */
async function registerToken(sessionTokens, token, ack) {
    // check that a token was sent
    if (! token) {
        ack(false, INVALID_TOKEN);
        return;
    }

    let tokenData;

    try {
        // check that the token was generated by our system
        tokenData = await findOneInTokens({
            token,
        });
    } catch (err) {
        ack(false, INVALID_TOKEN);
        return;
    }

    if (! tokenData) {
        ack(false, INVALID_TOKEN);
        return;
    }

    // check token type is LOGIN
    if (tokenData.tokenType === TOKEN_TYPES.LOGIB) {
        ack(false, INVALID_TOKEN);
        return;
    }

    // check that it is not verified and update token in header
    let tokenVerified;

    try {
        tokenVerified = verify(token, SECRET_KEY);
    } catch (err) {
        ack(false, INVALID_TOKEN);
        return;
    }

    try {
        // check the token belongs to a valid user
        if (! await findFromUsersById(tokenVerified.id)) {
            ack(false, NON_EXISTENT_USER);
            return;
        }
    } catch (err) {
        ack(false, TOKEN_NOT_REGISTERED);
        return;
    }

    if (sessionTokens[token]) {
        ack(false, TOKEN_ALREADY_REGISTERED);
        return;
    }

    sessionTokens[token] = {};
    console.log(sessionTokens);

    ack(true, TOKEN_REGISTERED);
}

module.exports = {
    registerToken,
};
